Merge Intervals
🟢 Pahchaan
Question me bola ho:
“Given intervals, merge overlapping intervals.”
Input: list of [start, end].
Output: non-overlapping intervals ka set.
👉 Shortcut Trick: “Intervals + Merge/Combine” = Merge Intervals

🟢 Algorithm & Logic
Intervals ko start time ke basis pe sort karo (kyun? taaki line me overlap check kar sakein).
Ek result list banao.
Har interval ke liye:
Agar result khali hai → add kar do.
Agar current.start ≤ last.end → overlap hai → merge karo.
Nahi overlap → add kar do.

🟢 Example (LeetCode 56. Merge Intervals)
Input: [[1,3],[2,6],[8,10],[15,18]]

Dry Run:
Sort → [[1,3],[2,6],[8,10],[15,18]]
Result = []
[1,3] → add → [[1,3]]
[2,6] → 2 ≤ 3 → merge → [1,6] → [[1,6]]
[8,10] → 8 > 6 → add → [[1,6],[8,10]]
[15,18] → 15 > 10 → add → [[1,6],[8,10],[15,18]]
👉 Output = [[1,6],[8,10],[15,18]]

🟢 Complexity
Time: O(n log n) (sorting)
Space: O(n)
🟢 Trick
Sort, Check, Merge; else Add.

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>>ans;
        sort(intervals.begin(), intervals.end());
        ans.push_back(intervals[0]);
        for(int i=1; i<intervals.size(); i++){
            int lastend = ans.back()[1];
            int currstart = intervals[i][0];
            int currend = intervals[i][1];

            if(currstart <= lastend){
                ans.back()[1] = max(lastend, currend); 
            }
            else{
                ans.push_back(intervals[i]);
            }
        }
        return ans;
    }
};
