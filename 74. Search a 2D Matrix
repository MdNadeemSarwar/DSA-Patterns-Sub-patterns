4️Binary Search in 2D Matrix
📌 Kaise pehchane?
Matrix sorted hota hai (row wise + next row ka first element ≥ previous row ka last).
Tumhe ek element search karna hai.

📌 Algorithm
Treat entire 2D matrix as a 1D array of size m*n.
Index mapping:
row = mid / n
col = mid % n
Normal binary search apply karo.

📌 Example (LeetCode 74)
Matrix =
[1, 3, 5, 7]  
[10, 11, 16, 20]  
[23, 30, 34, 60]  

Target=3
low=0, high=11
mid=5 → row=1, col=1 → matrix[1][1]=11 > 3 → high=4
mid=2 → row=0, col=2 → matrix[0][2]=5 > 3 → high=1
mid=0 → row=0, col=0 → matrix[0][0]=1 < 3 → low=1
mid=1 → row=0, col=1 → matrix[0][1]=3 ✅

📌 Code 
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size(), n = matrix[0].size();
        int low = 0, high = m*n - 1;
        while (low <= high) {
            int mid = low + (high - low)/2;
            int row = mid / n, col = mid % n;
            if (matrix[row][col] == target) return true;
            else if (matrix[row][col] < target) low = mid + 1;
            else high = mid - 1;
        }
        return false;
    }
};

⏱️ Complexity
Time = O(log(m*n))

Space = O(1)
