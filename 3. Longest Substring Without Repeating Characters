Time Complexity: O(n)
Space Complexity: O(min(n, charset_size))

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int longestmax = 0;
        int start = 0;
        unordered_set<char>set;

        for(int i=0; i<s.size(); i++){

            while(set.count(s[i])){
                set.erase(s[start]);
                start++;
            }
            set.insert(s[i]);
            longestmax =  max(longestmax, i - start + 1);
        }
        return longestmax;
    }
};
-----------------------------------------------------------------------------------------------------

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
       unordered_set<char>st;
       int count =0;
       int start = 0;
       int maxlen = 0;
       for(int i=0; i<s.size(); i++){
        char ch = s[i];
        while(st.count(ch)){
            st.erase(s[start]);
            start++;
            count--;
        }
        st.insert(ch);
        count++;
        maxlen = max (maxlen, count);
       }
        return maxlen; 
    }
};
