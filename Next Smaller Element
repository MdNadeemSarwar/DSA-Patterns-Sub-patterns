ðŸ”¹ Step 1: Pattern pehchanna (NSE)
Jab bhi question bole:
Har element ke liye apne right side ka pehla chhota element find karo.
Agar nahi mile toh -1 return karo.
ðŸ‘‰ Toh ye Next Smaller Element hai.

ðŸ”¹ Step 2: Logic / Funda
NGE (Next Grater) me humne decreasing stack banaya tha (top pe bada element).
NSE (Next Smaller) me humko increasing stack banana hai (top pe chhota element).
ðŸ‘‰ Rule:
Agar stack ka top >= current element hai â†’ pop karo (kyunki vo element kabhi NSE nahi ban sakta).
Agar stack empty hai â†’ iska NSE = -1.
Agar stack non-empty hai â†’ top hi iska NSE hai.

ðŸ”¹ Step 3: Example Dry Run
Array = [4, 8, 5, 2, 25]
Goal: Har element ke right side ka next smaller element find karo.
Step-by-step:
Traverse from right â†’ left

i = 4 â†’ nums[4] = 25
Stack = [] â†’ Empty â†’ ans[4] = -1
Push 25 â†’ Stack = [25]

i = 3 â†’ nums[3] = 2
Stack = [25]
Top = 25 >= 2 â†’ Pop 25
Stack empty â†’ ans[3] = -1
Push 2 â†’ Stack = [2]

i = 2 â†’ nums[2] = 5
Stack = [2]
Top = 2 < 5 â†’ ans[2] = 2
Push 5 â†’ Stack = [2,5]

i = 1 â†’ nums[1] = 8
Stack = [2,5]
Top = 5 < 8 â†’ ans[1] = 5
Push 8 â†’ Stack = [2,5,8]

i = 0 â†’ nums[0] = 4
Stack = [2,5,8]
Top = 8 >= 4 â†’ Pop 8
Top = 5 >= 4 â†’ Pop 5
Top = 2 < 4 â†’ ans[0] = 2
Push 4 â†’ Stack = [2,4]

Final Answer:
[2, 5, 2, -1, -1]

ðŸ”¹ Step 4: Algorithm
Ek stack banao.
Right se traverse karo.
Jab tak stack.top() â‰¥ current element, pop karo.
Agar stack empty â†’ ans[i] = -1, else ans[i] = stack.top().
Current element ko stack me push karo.

Time Complexity: O(n) (har element ek hi baar push/pop hota hai).
Space Complexity: O(n) (stack + answer array).

class Solution {
public:
    vector<int> nextSmallerElements(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n, -1);
        stack<int> st;

        for(int i = n-1; i >= 0; i--) {
            while(!st.empty() && st.top() >= nums[i]) {
                st.pop();
            }
            if(!st.empty()) ans[i] = st.top();
            st.push(nums[i]);
        }
        return ans;
    }
};
