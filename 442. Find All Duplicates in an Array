ðŸ”¹ Rule of Cyclic Sort
Agar array me numbers 1 to N ke range ke hain:
ðŸ‘‰ Har number x ka correct index = x - 1
Example:
Number 1 â†’ index 0 pe hona chahiye
Number 2 â†’ index 1 pe hona chahiye
Number 3 â†’ index 2 pe hona chahiye
... and so on.

ðŸ”¹ Tumhare Example: nums = [3, 1, 5, 4, 2]
ðŸ‘‰ Array length = 5, to numbers 1 se 5 tak honge.
Correct mapping:
1 â†’ index 0
2 â†’ index 1
3 â†’ index 2
4 â†’ index 3
5 â†’ index 4

ðŸ”¹ Dry Run Step-by-Step
i = 0 â†’ nums[0] = 3
3 ka correct index = 3 - 1 = 2
Lekin nums[0] abhi index 0 pe pada hai (galat jagah).
Swap karo nums[0] with nums[2].
Array â†’ [5, 1, 3, 4, 2]
i = 0 â†’ nums[0] = 5
5 ka correct index = 5 - 1 = 4
Abhi 5 index 0 pe hai â†’ galat jagah.
Swap karo nums[0] with nums[4].

Array â†’ [2, 1, 3, 4, 5]
i = 0 â†’ nums[0] = 2
2 ka correct index = 2 - 1 = 1
Lekin 2 abhi index 0 pe hai â†’ galat jagah.
Swap karo nums[0] with nums[1].

Array â†’ [1, 2, 3, 4, 5]
Ab check karo:
1 sahi index pe hai (0)
2 sahi index pe hai (1)
3 sahi index pe hai (2)
4 sahi index pe hai (3)
5 sahi index pe hai (4)
ðŸ‘‰ Done âœ…

ðŸ”¹ Key Point
Cyclic Sort ka main funda yahi hai:
Number x â†’ hamesha apne index x-1 pe hona chahiye.
Jab tak wo correct jagah pe nahi hai â†’ usko uske correct index ke saath swap karte raho.

TC= O(N)
SC=> O(1)

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        int n = nums.size(); 
        int i=0;
        
        while(i<n){
            int current = nums[i] - 1;
            if(nums[i] <= n && nums[i] != nums[current]){
                swap(nums[i], nums[current]);
            }
            else{
                i++;
            }
        }
        vector<int>ans;
        for(int i=0; i<n; i++){
            if(nums[i] != i+1){
                ans.push_back(nums[i]);
            }
        }
        return ans;
    }
};

--------------------------------------------------------------------------------------------------------------
Sort kardo then har eleement lp uske bagal wale se compare kardo mel jayega duplicate 
TC=> O(N LOGN) 
SC=> O(N)

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<int>ans;
        for(int i=0; i<nums.size()-1; i++){
            if(nums[i] == nums[i+1]){
                ans.push_back(nums[i]);
            }
        }
        return ans;
    }
};

-----------------------------------------------------------------------------------------------------------
unordered_set banao insert karne se pahle chek karlo agar already mel gaay to ans me dal lo nahi to set me puch kardo 
TC-=> O(N)
SC=> O(N)

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        unordered_set<int>set;
        vector<int>ans;
        for(int i=0; i<nums.size(); i++){
            if(set.find(nums[i]) != set.end()){
                ans.push_back(nums[i]);
            }
            else{
                set.insert(nums[i]);
            }
        }
        return ans;
    }
};
----------------------------------------------------------------------------------------------------------------------------------------
